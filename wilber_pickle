#!/home/samhaug/anaconda2/bin/python

'''
==============================================================================

File Name : wilber_pickle.py
Purpose : pickle files downloaded from wilber
Creation Date : 30-08-2017
Last Modified : Wed 30 Aug 2017 11:33:06 AM EDT
Created By : Samuel M. Haugland

==============================================================================
'''

import numpy as np
from matplotlib import pyplot as plt
from subprocess import call
from os import listdir
import h5py
import obspy
import seispy

def main():
    stz = obspy.read('*BHZ*filtered')
    ste = obspy.read('*BHE*filtered')
    stn = obspy.read('*BHN*filtered')
    stz,stn,ste = station_list_filter(stz,stn,ste)
    stz.sort(['station'])
    ste.sort(['station'])
    stn.sort(['station'])
    stz.interpolate(10)
    ste.interpolate(10)
    stn.interpolate(10)
    a = []
    for tr in stz:
        a.append(tr.stats.npts)
    trlen = int(np.mean(a))
    for idx,tr in enumerate(stz):
        stz[idx].data = stz[idx].data[0:trlen]
        ste[idx].data = ste[idx].data[0:trlen]
        stn[idx].data = stn[idx].data[0:trlen]
    for idx,tr in enumerate(stz):
        if tr.stats.npts != trlen:
            stz.remove(tr)
    for idx,tr in enumerate(ste):
        if tr.stats.npts != trlen:
            ste.remove(tr)
    for idx,tr in enumerate(stn):
        if tr.stats.npts != trlen:
            stn.remove(tr)
    stz = h5_metadata(stz)
    stn = h5_metadata(stn)
    ste = h5_metadata(ste)
    stz = seispy.convert.set_az_gcarc(stz)
    stn = seispy.convert.set_az_gcarc(stn)
    ste = seispy.convert.set_az_gcarc(ste)
    stn,ste = even_traces(stn,ste)

    str,stt = seispy.rotate.obspy_rotate_ne_rt(stn,ste)
    stt.write('st_T.h5',format='H5')
    str.write('st_R.h5',format='H5')
    stz.write('st_Z.h5',format='H5')
    stn.write('st_N.h5',format='H5')
    ste.write('st_E.h5',format='H5')

def station_list_filter(stz,stn,ste):
    stat_list_z = []
    stat_list_e = []
    stat_list_n = []
    for tr in stz:
        if tr.stats.station+tr.stats.network in stat_list_z:
            stz.remove(tr)
        stat_list_z.append(tr.stats.station+tr.stats.network)
    for tr in stn:
        if tr.stats.station+tr.stats.network in stat_list_n:
            stn.remove(tr)
        stat_list_n.append(tr.stats.station+tr.stats.network)
    for tr in ste:
        if tr.stats.station+tr.stats.network in stat_list_e:
            ste.remove(tr)
        stat_list_e.append(tr.stats.station+tr.stats.network)
    I = list(set(stat_list_e).intersection(set(stat_list_n)).intersection(set(stat_list_z)))
    for tr in stz:
        if tr.stats.station+tr.stats.network not in I:
            stz.remove(tr)
    for tr in stn:
        if tr.stats.station+tr.stats.network not in I:
            stn.remove(tr)
    for tr in ste:
        if tr.stats.station+tr.stats.network not in I:
            ste.remove(tr)
    return stz,stn,ste

def h5_metadata(st):
    for tr in st:
        tr.stats.evla = tr.stats.sac['evla']
        tr.stats.evlo = tr.stats.sac['evlo']
        tr.stats.stla = tr.stats.sac['stla']
        tr.stats.stlo = tr.stats.sac['stlo']
        tr.stats.evdp = tr.stats.sac['evdp']
        tr.stats.o = tr.stats.sac['o']
    return st

def even_traces(stn,ste):
    n = []
    e = []
    for tr in stn:
        tr.stats.name = tr.stats.network+tr.stats.station+tr.stats.location
        n.append(tr.stats.name)
    for tr in ste:
        tr.stats.name = tr.stats.network+tr.stats.station+tr.stats.location
        e.append(tr.stats.name)
    c = set(n).intersection(set(e))
    for tr in stn:
        if tr.stats.name not in c:
            stn.remove(tr)
    for tr in ste:
        if tr.stats.name not in c:
            ste.remove(tr)
    stn.sort(['name'])
    ste.sort(['name'])

    name_remove = []
    for idx,tr in enumerate(stn):
        if len(tr.data) != len(ste[idx].data):
            name_remove.append(tr.name)
    print len(name_remove)
    for tr in stn:
        if tr.stats.name in name_remove:
            stn.remove(tr)
    for tr in ste:
        if tr.stats.name in name_remove:
            ste.remove(tr)
    return stn,ste


main()





